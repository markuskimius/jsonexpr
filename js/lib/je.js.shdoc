/* ***************************************************************************
* CONSTANTS
*/

const _WASMFILE = new URL("./je.wasm", import.meta.url);
const _WASMREADY = fetch(_WASMFILE).then((response) => response.arrayBuffer());
const _TARGET = Symbol.for("target");
const _LENGTH = Symbol.for("length");


/* ***************************************************************************
* OS INTERFACE
*/

class OS {
    constructor() {
        this.fdbuf = [ "", "", "" ];
    }

    read(fd, buf, count) {
        console.log("OS.read(" + fd + ", buf, " + count + ")");

        return 0;
    }

    write(fd, buf, count) {
        const str = new TextDecoder().decode(buf.subarray(0,count));
        const lines = str.split("\n");

        for(let i=0; i<lines.length-1; i++) {
            this.fdbuf[fd] += lines[i];
            console.log(this.fdbuf[fd]);
            this.fdbuf[fd] = "";
        }

        if(lines.length) {
            this.fdbuf[fd] += lines[lines.length-1];
        }

        return count;
    }
}


/* ***************************************************************************
* WASM INTERFACE
*/

class Iface {
    constructor(os=null) {
        this.instance = null;
        this.encoder = new TextEncoder();
        this.decoder = new TextDecoder("utf-8");
        this.os = os ? os : new OS();

        /* Load jsonexpr */
        this.ready = _WASMREADY
            .then((bytes) => WebAssembly.instantiate(bytes, {
                env : {
                    read  : (fd,buf,count) => this.read(fd,buf,count),
                    write : (fd,buf,count) => this.write(fd,buf,count),
                    _exit : (exitcode)     => this.exit(exitcode),
                },
            }))
            .then((result) => {
                /* Instantiate */
                this.instance = result.instance;

                return this;
            });
    }

    read(fd, buf, count) {
        const memory8 = new Uint8Array(this.instance.exports.memory.buffer, buf, count);

        return this.os.read(fd, memory8, count);
    }

    write(fd, buf, count) {
        const memory8 = new Uint8Array(this.instance.exports.memory.buffer, buf, count);

        return this.os.write(fd, memory8, count);
    }

    exit(code) {
        throw new Exit(code);
    }

    strat(waddr) {
        const memory8 = new Uint8Array(this.instance.exports.memory.buffer, waddr);
        let count = 0;

        while(memory8[count] != 0) {
            count++;
        }

        return this.decoder.decode(memory8.subarray(0,count));
    }

    strdup(string) {
        const encoded = this.encoder.encode(string);
        const waddr = this.instance.exports.calloc(1, encoded.length+1);
        const memory8 = new Uint8Array(this.instance.exports.memory.buffer, waddr);

        memory8.set(encoded);
        encoded[encoded.length] = 0;

        return waddr;
    }

    free(waddr) {
        this.instance.exports.free(waddr);
    }

    parse(wcode) {
        return this.instance.exports.parse(wcode);
    }

    asteval(wast, wsymmap, inode=0) {
        return this.instance.exports.asteval(wast, wsymmap, BigInt(inode));
    }

    astfree(wast) {
        this.instance.exports.astfree(wast);
    }

    newsym(wparent=0) {
        return this.instance.exports.newsym(wparent);
    }

    symget(wsymmap, wkey) {
        return this.instance.exports.symget(wsymmap, wkey);
    }

    symset(wsymmap, wkey, wvalue) {
        return this.instance.exports.symset(wsymmap, wkey, wvalue, 0);
    }

    symunset(wsymmap, wkey) {
        return this.instance.exports.symunset(wsymmap, wkey);
    }

    symfree(wsymmap) {
        return this.instance.exports.symfree(wsymmap);
    }

    nullval() {
        return this.instance.exports.nullval();
    }

    boolval(bool) {
        return this.instance.exports.boolval(bool);
    }

    i64val(i64) {
        return this.instance.exports.i64val(BigInt(i64));
    }

    f64val(f64) {
        return this.instance.exports.f64val(f64);
    }

    strval(wcstr) {
        return this.instance.exports.strval(wcstr);
    }

    mapval() {
        return this.instance.exports.mapval();
    }

    vecval() {
        return this.instance.exports.vecval();
    }

    valdup(wval) {
        return this.instance.exports.valdup(wval);
    }

    valtype(wval) {
        return this.strat(this.instance.exports.valtype(wval));
    }

    valfree(wval) {
        return this.instance.exports.valfree(wval);
    }

    valtobool(wval) {
        return this.instance.exports.valtobool(wval);
    }

    valtoi64(wval) {
        return this.instance.exports.valtoi64(wval);
    }

    valtof64(wval) {
        return this.instance.exports.valtof64(wval);
    }

    valtocstr(wval) {
        return this.instance.exports.valtocstr(wval);
    }

    valtoqstr(wval) {
        return this.instance.exports.valtoqstr(wval);
    }

    maplen(wmap) {
        return this.instance.exports.maplen(wmap);
    }

    mapget(wmap, wkey) {
        return this.instance.exports.mapget(wmap, wkey);
    }

    mapset(wmap, wkey, wval) {
        return this.instance.exports.mapset(wmap, wkey, wval);
    }

    mapunset(wmap, wkey) {
        return this.instance.exports.mapunset(wmap, wkey);
    }

    mapbegin(wmap) {
        return this.instance.exports.mapbegin(Number(wmap));
    }

    mapend(wmap) {
        return this.instance.exports.mapend(wmap);
    }

    mapnext(wmap, witer) {
        return this.instance.exports.mapnext(wmap, witer);
    }

    mapgetkey(wmap, witer) {
        return this.instance.exports.mapgetkey(wmap, witer);
    }

    mapgetval(wmap, witer) {
        return this.instance.exports.mapgetval(wmap, witer);
    }

    veclen(wvec) {
        return this.instance.exports.veclen(wvec);
    }

    vecget(wvec, index) {
        return this.instance.exports.vecget(wvec, index);
    }

    vecset(wvec, index, wval) {
        return this.instance.exports.vecset(wvec, index, wval);
    }

    vecpush(wvec, wval) {
        return this.instance.exports.vecpush(wvec, wval);
    }

    vecpop(wvec) {
        return this.instance.exports.vecpop(wvec);
    }

    vecunset(wvec, index) {
        return this.instance.exports.vecunset(wvec, index);
    }
}


/* ***************************************************************************
* INSTANCE
*/

class Instance {
    constructor(iface) {
        this.iface = iface;
    }

    symmap(symbols=null) {
        const symmap = new Symmap(this.iface, symbols);

        return new Proxy(symmap, new _SymmapHandler());
    }

    parse(code) {
        return new Parsed(this.iface, code);
    }
}


/* ***************************************************************************
* PARSED
*/

class Parsed {
    constructor(iface, code) {
        const wcode = iface.strdup(code);

        this.iface = iface;
        this.wast = iface.parse(wcode);
        this.iface.free(wcode);
    }

    destructor() {
        this.iface.astfree(this.wast);
    }

    eval(symmap=null) {
        const _symmap = symmap===null ? new Symmap(this.iface) : symmap[_TARGET];

        if(_symmap.iface === this.iface) {
            const wvalue = this.iface.asteval(this.wast, _symmap.wsymmap, 0);
            const value = _getvalue(this.iface, wvalue);

            this.iface.valfree(wvalue);

            return value;
        }

        throw new UsageError("Code and Symmap must be from the same JSONexpr Instance");
    }
}


/* ***************************************************************************
* TYPES
*/

class Symmap {
    constructor(iface, symbols=null) {
        this.iface = iface;
        this.wsymmap = iface.newsym();

        if(symbols !== null) {
            this.merge(symbols);
        }
    }

    destructor() {
        this.iface.symfree(this.wsymmap);
    }

    has(name) {
        const wname = this.iface.strdup(name);
        const wvalue = this.iface.symget(this.wsymmap, wname);

        this.iface.free(wname);
        /* wvalue is a pointer to a value in wsymmap; do not free */

        return wvalue != 0;
    }

    get(name) {
        const wname = this.iface.strdup(name);
        const wvalue = this.iface.symget(this.wsymmap, wname);
        const value = _getvalue(this.iface, wvalue);

        this.iface.free(wname);
        /* wvalue is a pointer to a value in wsymmap; do not free */

        return value;
    }

    set(name, value) {
        const wname = this.iface.strdup(name);
        const wvalue = _mkvalue(this.iface, value);

        this.iface.symset(this.wsymmap, wname, wvalue);

        /* wname and wvalue are now in wsymmap; do not free */

        return value;
    }

    unset(name) {
        const wname = this.iface.strdup(name);

        this.iface.symunset(this.wsymmap, wname);
        this.iface.free(wname);
    }

    merge(obj) {
        for(const [name,value] of Object.entries(obj)) {
            this.set(name, value);
        }
    }
}

class Map {
    constructor(iface, wmap) {
        this.iface = iface;
        this.wmap = iface.valdup(wmap);
    }

    destructor() {
        this.iface.valfree(this.wmap);
    }

    has(name) {
        const wname = this.iface.strdup(name);
        const wresult = this.iface.mapget(this.wmap, wname);

        this.iface.free(wname);
        /* wvalue is a pointer to a value in wsymmap; do not free */

        return wresult != 0;
    }

    keys() {
        const keys = [];

        for(let i = this.iface.mapbegin(this.wmap); i != this.iface.mapend(this.wmap); i = this.iface.mapnext(this.wmap, i)) {
            const wkey = this.iface.mapgetkey(this.wmap, i);
            const key = this.iface.strat(wkey);

            /* wkey is in wmap, do not free */

            keys.push(key);
        }

        return keys;
    }

    get(name) {
        const wname = this.iface.strdup(name);
        const wvalue = this.iface.mapget(this.wmap, wname);
        const value = _getvalue(this.iface, wvalue);

        this.iface.free(wname);
        /* wvalue is a pointer to a value in wmap; do not free */

        return value;
    }

    set(name, value) {
        const wname = this.iface.strdup(name);
        const wvalue = _mkvalue(this.iface, value);

        this.iface.mapset(this.wmap, wname, wvalue);

        /* wname and wvalue are now in wmap; do not free */

        return value;
    }

    unset(name) {
        const wname = this.iface.strdup(name);

        this.iface.mapunset(this.wmap, wname);
        this.iface.free(wname);
    }

    get length() {
        return this.iface.maplen(this.wmap);
    }

    toString() {
        const wqstr = this.iface.valtoqstr(this.wmap);
        const qstr = this.iface.strat(wqstr);

        this.iface.free(wqstr);

        return qstr;
    }
}

class Vec {
    constructor(iface, wvec) {
        this.iface = iface;
        this.wvec = iface.valdup(wvec);
    }

    destructor() {
        this.iface.valfree(this.wvec);
    }

    get(index) {
        const wvalue = this.iface.vecget(this.wvec, index);
        const value = _getvalue(this.iface, wvalue);

        /* wvalue is a pointer to a value in wvec; do not free */

        return value;
    }

    set(index, value) {
        const wvalue = _mkvalue(this.iface, value);

        this.iface.vecset(this.wvec, index, wvalue);

        /* wvalue is now in wvec; do not free */

        return value;
    }

    unset(index) {
        this.iface.vecunset(this.wvec, index);
    }

    get length() {
        return this.iface.veclen(this.wvec);
    }

    toString() {
        const wqstr = this.iface.valtoqstr(this.wvec);
        const qstr = this.iface.strat(wqstr);

        this.iface.free(wqstr);

        return qstr;
    }
}


/* ***************************************************************************
* PROXY HANDLERS
*/

class _SymmapHandler {
    has(target, name) {
        return target.has(name);
    }

    get(target, property, receiver) {
        switch(property) {
            case _TARGET            : return target;
        }

        /* Key */
        return target.get(String(property));
    }

    set(target, name, value, receiver) {
        return target.set(name, value);
    }

    deleteProperty(target, property) {
        target.unset(String(property));

        return true;
    }
}

class _MapHandler {
    has(target, name) {
        return target.has(name);
    }

    ownKeys(target) {
        return target.keys();
    }

    getOwnPropertyDescriptor(target, property) {
        const pd = {
            configurable : true,
            enumerable   : true,
        }

        return pd;
    }

    get(target, property, receiver) {
        switch(property) {
            case _TARGET            : return target;
            case _LENGTH            : return Number(target.length);
            case Symbol.toPrimitive : return () => target.toString();
        }

        /* Key */
        return target.get(String(property));
    }

    set(target, name, value, receiver) {
        return target.set(name, value);
    }

    deleteProperty(target, property) {
        target.unset(String(property));

        return true;
    }
}

class _VecHandler {
    get(target, property, receiver) {
        switch(property) {
            case _TARGET            : return target;
            case _LENGTH            : return Number(target.length);
            case "length"           : return Number(target.length);
            case Symbol.toPrimitive : return () => target.toString();
        }

        /* Index */
        if(/^\d+$/.test(String(property))) {
            return target.get(BigInt(property));
        }
    }

    set(target, index, value, receiver) {
        return target.set(index, value);
    }

    deleteProperty(target, index) {
        target.unset(index);

        return true;
    }
}


/* ***************************************************************************
* PRIVATE FUNCTIONS
*/

function _getvalue(iface, wvalue) {
    let value = null;

    if(wvalue) {
        const value_t = iface.valtype(wvalue);

        switch(value_t) {
            case "OBJECT" : value = new Proxy(new Map(iface, wvalue), new _MapHandler()); break;
            case "ARRAY"  : value = new Proxy(new Vec(iface, wvalue), new _VecHandler()); break;
            default       :
                const wqstr = iface.valtoqstr(wvalue);
                const qstr = iface.strat(wqstr);

                iface.free(wqstr);

                value = JSON.parse(qstr);
        }
    }

    return value;
}

function _mkvalue(iface, value, ext="") {
    let wvalue = null;

    switch(typeof(value)) {
        case "boolean": {
            wvalue = iface.boolval(value);
            break;
        }
        case "number" : {
            if(Number.isInteger(value)) wvalue = iface.i64val(value);
            else                        wvalue = iface.f64val(value);
            break;
        }
        default : {
            if(value === null)                     wvalue = iface.nullval();
            else if(value[_TARGET] instanceof Map) wvalue = iface.valdup(value[_TARGET].wmap);
            else if(value[_TARGET] instanceof Vec) wvalue = iface.valdup(value[_TARGET].wvec);
            else if(value instanceof Array) {
                wvalue = iface.vecval();

                for(const v of value) {
                    iface.vecpush(wvalue, _mkvalue(iface, v, ext+"  "));
                }
            }
            else if(value instanceof Object) {
                wvalue = iface.mapval();

                for(const [k,v] of Object.entries(value)) {
                    iface.mapset(wvalue, iface.strdup(String(k)), _mkvalue(iface, v, ext+"  "));
                }
            }
            else {
                wvalue = iface.strval(iface.strdup(String(value)));
            }
        }
    }

    return wvalue;
}


/* ***************************************************************************
* PUBLIC EXCEPTIONS
*/

class JeException extends Error {
    constructor(text) {
        super(text);

        this.text = text;
    }
}

class UsageError extends JeException {
    constructor(text) {
        super(text);
    }
}

class SyntaxError extends JeException {
    constructor(text) {
        super(text);
    }
}

class Exit extends JeException {
    constructor(code) {
        super(str(code));

        this.code = code;
    }
}


/* ***************************************************************************
* PUBLIC FUNCTIONS
*/

async function _instance(os=null) {
    const iface = new Iface(os);

    await iface.ready;

    return new Instance(iface);
}

async function _eval(code, symbols=null) {
    const instance = await _instance();
    const parsed = instance.parse(code);
    const symmap = instance.symmap(symbols);

    return parsed.eval(symmap)
}

async function _evalfile(url, symbols=null) {
    const response = await fetch(url);
    const code = await response.text();

    return await _eval(code, symbols);
}


/* ***************************************************************************
* EXPORTS
*/

export default {
    /* CONSTANTS */
    VERSION       : "${JE_VERSION}",
    VERSION_MAJOR : ${JE_VERSION%%.*},
    VERSION_MINOR : $(t=${JE_VERSION#*.}; printf "%s" "${t%.*}"),
    VERSION_PATCH : ${JE_VERSION##*.},

    /* CLASSES */
    OS            : OS,

    /* EXCEPTIONS */
    Exit          : Exit,
    SyntaxError   : SyntaxError,

    /* FUNCTIONS */
    instance      : _instance,
    eval          : _eval,
    evalfile      : _evalfile,
    length        : (x) => x[_LENGTH],
};


/* vim:ft=javascript:
*/
