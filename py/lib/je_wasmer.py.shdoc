__copyright__ = "Copyright 2024-2025 Mark Kim"
__license__ = "Apache 2.0"
__version__ = "${JE_VERSION}"
__author__ = "Mark Kim"

import os
import wasmer
import importlib.util

if importlib.util.find_spec("wasmer_compiler_llvm") is not None:
    import wasmer_compiler_llvm
else:
    import wasmer_compiler_cranelift


##############################################################################
# CONSTANTS

SCRIPTDIR     = os.path.dirname(__file__)
WASMFILE      = os.path.join(SCRIPTDIR, "je.wasm")


##############################################################################
# WASMER INTERFACE

class Iface:
    def __init__(self):
        # Load jsonexpr
        with open(WASMFILE, mode="rb") as fd:
            self.store = wasmer.Store()
            self.module = wasmer.Module(self.store, fd.read())

        # Instantiate
        self.instance = wasmer.Instance(self.module, {
            "env": {
                "read"   : wasmer.Function(self.store, self.read),
                "write"  : wasmer.Function(self.store, self.write),
                "_exit"  : wasmer.Function(self.store, self._exit),
            }
        })

        # Cache memory
        self.memory8 = self.instance.exports.memory.uint8_view()

    def read(self, fd:"i32", buf:"i32", count:"i32") -> "i32":
        data = os.read(fd, count)
        count = len(data)
        self.memory8[buf:buf+count] = data

        return count

    def write(self, fd:"i32", buf:"i32", count:"i32") -> "i32":
        return os.write(fd, bytearray(self.memory8[buf:buf+count]))

    def _exit(self, status:"i32") -> None:
        raise Exit(status)

    def strat(self, waddr):
        count = 0

        while(self.memory8[waddr+count] != 0):
            count += 1

        return bytearray(self.memory8[waddr:waddr+count]).decode("utf-8")

    def strdup(self, string):
        encoded = string.encode("utf-8")
        waddr = self.instance.exports.calloc(1, len(encoded)+1)
        self.memory8[waddr:waddr+len(string)] = encoded
        self.memory8[waddr+len(encoded)] = 0

        return waddr

    def free(self, waddr):
        self.instance.exports.free(waddr)

    def parse(self, wcode):
        return self.instance.exports.parse(wcode)

    def asteval(self, wast, wsymmap, inode=0):
        return self.instance.exports.asteval(wast, wsymmap, inode)

    def astfree(self, wast):
        self.instance.exports.astfree(wast)

    def newsym(self, wparent=0):
        return self.instance.exports.newsym(wparent)

    def symget(self, wsymmap, wkey):
        return self.instance.exports.symget(wsymmap, wkey)

    def symset(self, wsymmap, wkey, wvalue):
        return self.instance.exports.symset(wsymmap, wkey, wvalue, 0)

    def symfree(self, wsymmap):
        return self.instance.exports.symfree(wsymmap)

    def nullval(self):
        return self.instance.exports.nullval()

    def boolval(self, _bool):
        return self.instance.exports.boolval(_bool)

    def i64val(self, i64):
        return self.instance.exports.i64val(i64)

    def f64val(self, f64):
        return self.instance.exports.f64val(f64)

    def strval(self, wcstr):
        return self.instance.exports.strval(wcstr)

    def mapval(self):
        return self.instance.exports.mapval()

    def vecval(self):
        return self.instance.exports.vecval()

    def valdup(self, wval):
        return self.instance.exports.valdup(wval)

    def valtype(self, wval):
        return self.strat(self.instance.exports.valtype(wval))

    def valfree(self, wval):
        self.instance.exports.valfree(wval)

    def valtobool(self, wval):
        return self.instance.exports.valtobool(wval)

    def valtoi64(self, wval):
        return self.instance.exports.valtoi64(wval)

    def valtof64(self, wval):
        return self.instance.exports.valtof64(wval)

    def valtocstr(self, wval):
        return self.instance.exports.valtocstr(wval)

    def valtoqstr(self, wval):
        return self.instance.exports.valtoqstr(wval)

    def maplen(self, wmap):
        return self.instance.exports.maplen(wmap)

    def mapget(self, wmap, wkey):
        return self.instance.exports.mapget(wmap, wkey)

    def mapset(self, wmap, wkey, wval):
        return self.instance.exports.mapset(wmap, wkey, wval)

    def mapunset(self, wmap, wkey):
        self.instance.exports.mapunset(wmap, wkey)

    def mapbegin(self, wmap):
        return self.instance.exports.mapbegin(wmap)

    def mapend(self, wmap):
        return self.instance.exports.mapend(wmap)

    def mapnext(self, wmap, witer):
        return self.instance.exports.mapnext(wmap, witer)

    def mapgetkey(self, wmap, witer):
        return self.instance.exports.mapgetkey(wmap, witer)

    def mapgetval(self, wmap, witer):
        return self.instance.exports.mapgetval(wmap, witer)

    def veclen(self, wvec):
        return self.instance.exports.veclen(wvec)

    def vecget(self, wvec, index):
        return self.instance.exports.vecget(wvec, index)

    def vecset(self, wvec, index, wval):
        return self.instance.exports.vecset(wvec, index, wval)

    def vecpush(self, wvec, wval):
        return self.instance.exports.vecpush(wvec, wval)

    def vecpop(self, wvec):
        return self.instance.exports.vecpop(wvec)

    def vecunset(self, wvec, index):
        self.instance.exports.vecunset(wvec, index)


# vim:ft=python:
