__copyright__ = "Copyright 2024-2025 Mark Kim"
__license__ = "Apache 2.0"
__version__ = "${JE_VERSION}"
__author__ = "Mark Kim"

import os
from wasmtime import Store, Module, FuncType, ValType, Linker, Engine


##############################################################################
# CONSTANTS

SCRIPTDIR     = os.path.dirname(__file__)
WASMFILE      = os.path.join(SCRIPTDIR, "je.wasm")


##############################################################################
# WASMTIME INTERFACE

class Iface:
    def __init__(self):
        self.engine = Engine()
        self.store = Store(self.engine)
        self.linker = Linker(self.engine)

        self.linker.define_func("env", "read" , FuncType([ValType.i32(), ValType.i32(), ValType.i32()], [ValType.i32()]), self.read)
        self.linker.define_func("env", "write", FuncType([ValType.i32(), ValType.i32(), ValType.i32()], [ValType.i32()]), self.write)
        self.linker.define_func("env", "_exit", FuncType([ValType.i32()], []), self._exit)

        self.module = Module.from_file(self.engine, WASMFILE)
        self.instance = self.linker.instantiate(self.store, self.module)
        self.memory8 = self.instance.exports(self.store)["memory"].get_buffer_ptr(self.store)
        self._start = self.instance.exports(self.store)["_start"]

    def read(self, fd:"i32", buf:"i32", count:"i32") -> "i32":
        data = os.read(fd, count)
        count = len(data)

        self.memory8 = self.instance.exports(self.store)["memory"].get_buffer_ptr(self.store)
        self.memory8[buf:buf+count] = data

        return count

    def write(self, fd:"i32", buf:"i32", count:"i32") -> "i32":
        self.memory8 = self.instance.exports(self.store)["memory"].get_buffer_ptr(self.store)

        return os.write(fd, bytearray(self.memory8[buf:buf+count]))

    def _exit(self, status:"i32") -> None:
        raise Exit(status)

    def strat(self, waddr):
        count = 0

        self.memory8 = self.instance.exports(self.store)["memory"].get_buffer_ptr(self.store)

        while(self.memory8[waddr+count] != 0):
            count += 1

        return bytearray(self.memory8[waddr:waddr+count]).decode("utf-8")

    def strdup(self, string):
        encoded = string.encode("utf-8")
        waddr = self.instance.exports(self.store)["calloc"](self.store, 1, len(encoded)+1)
        self.memory8 = self.instance.exports(self.store)["memory"].get_buffer_ptr(self.store)
        self.memory8[waddr:waddr+len(string)] = encoded
        self.memory8[waddr+len(encoded)] = 0

        return waddr

    def free(self, waddr):
        self.instance.exports(self.store)["free"](self.store, waddr)

    def parse(self, wcode):
        return self.instance.exports(self.store)["parse"](self.store, wcode)

    def asteval(self, wast, wsymmap, inode=0):
        return self.instance.exports(self.store)["asteval"](self.store, wast, wsymmap, inode)

    def astfree(self, wast):
        self.instance.exports(self.store)["astfree"](self.store, wast)

    def newsym(self, wparent=0):
        return self.instance.exports(self.store)["newsym"](self.store, wparent)

    def symget(self, wsymmap, wkey):
        return self.instance.exports(self.store)["symget"](self.store, wsymmap, wkey)

    def symset(self, wsymmap, wkey, wvalue):
        return self.instance.exports(self.store)["symset"](self.store, wsymmap, wkey, wvalue, 0)

    def symfree(self, wsymmap):
        return self.instance.exports(self.store)["symfree"](self.store, wsymmap)

    def nullval(self):
        return self.instance.exports(self.store)["nullval"](self.store)

    def boolval(self, _bool):
        return self.instance.exports(self.store)["boolval"](self.store, _bool)

    def i64val(self, i64):
        return self.instance.exports(self.store)["i64val"](self.store, i64)

    def f64val(self, f64):
        return self.instance.exports(self.store)["f64val"](self.store, f64)

    def strval(self, wcstr):
        return self.instance.exports(self.store)["strval"](self.store, wcstr)

    def mapval(self):
        return self.instance.exports(self.store)["mapval"](self.store)

    def vecval(self):
        return self.instance.exports(self.store)["vecval"](self.store)

    def valdup(self, wval):
        return self.instance.exports(self.store)["valdup"](self.store, wval)

    def valtype(self, wval):
        return self.strat(self.instance.exports(self.store)["valtype"](self.store, wval))

    def valfree(self, wval):
        self.instance.exports(self.store)["valfree"](self.store, wval)

    def valtobool(self, wval):
        return self.instance.exports(self.store)["valtobool"](self.store, wval)

    def valtoi64(self, wval):
        return self.instance.exports(self.store)["valtoi64"](self.store, wval)

    def valtof64(self, wval):
        return self.instance.exports(self.store)["valtof64"](self.store, wval)

    def valtocstr(self, wval):
        return self.instance.exports(self.store)["valtocstr"](self.store, wval)

    def valtoqstr(self, wval):
        return self.instance.exports(self.store)["valtoqstr"](self.store, wval)

    def maplen(self, wmap):
        return self.instance.exports(self.store)["maplen"](self.store, wmap)

    def mapget(self, wmap, wkey):
        return self.instance.exports(self.store)["mapget"](self.store, wmap, wkey)

    def mapset(self, wmap, wkey, wval):
        return self.instance.exports(self.store)["mapset"](self.store, wmap, wkey, wval)

    def mapunset(self, wmap, wkey):
        self.instance.exports(self.store)["mapunset"](self.store, wmap, wkey)

    def mapbegin(self, wmap):
        return self.instance.exports(self.store)["mapbegin"](self.store, wmap)

    def mapend(self, wmap):
        return self.instance.exports(self.store)["mapend"](self.store, wmap)

    def mapnext(self, wmap, witer):
        return self.instance.exports(self.store)["mapnext"](self.store, wmap, witer)

    def mapgetkey(self, wmap, witer):
        return self.instance.exports(self.store)["mapgetkey"](self.store, wmap, witer)

    def mapgetval(self, wmap, witer):
        return self.instance.exports(self.store)["mapgetval"](self.store, wmap, witer)

    def veclen(self, wvec):
        return self.instance.exports(self.store)["veclen"](self.store, wvec)

    def vecget(self, wvec, index):
        return self.instance.exports(self.store)["vecget"](self.store, wvec, index)

    def vecset(self, wvec, index, wval):
        return self.instance.exports(self.store)["vecset"](self.store, wvec, index, wval)

    def vecpush(self, wvec, wval):
        return self.instance.exports(self.store)["vecpush"](self.store, wvec, wval)

    def vecpop(self, wvec):
        return self.instance.exports(self.store)["vecpop"](self.store, wvec)

    def vecunset(self, wvec, index):
        self.instance.exports(self.store)["vecunset"](self.store, wvec, index)


# vim:ft=python:
